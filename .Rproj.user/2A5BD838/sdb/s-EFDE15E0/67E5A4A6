{
    "collab_server" : "",
    "contents" : "################# All HLI cohort All MiHA\nIndividual_MiHA_table_fp <- \"../Output/wwangMiHAIP_DtoR/RestrictedMiHA/\"\nIndividual_MiHA_table_files <- list.files(Individual_MiHA_table_fp, pattern = \"\\\\.RData\")\nnum_files <- length(Individual_MiHA_table_files)\n\n# save(Restircted_MiHA_db, file = \"../Data/Restricted_MiHA_database_RMduplicated.RData\")\n\nload(\"../Data/Restricted_MiHA_database_RMduplicated.RData\") ## Restircted_MiHA_db\nload(\"../Data/ID_table_wCaseID.RData\")          ## ID_table\nload(\"../Data/HLI_reformatted_HLA_table_corrected.RData\") ## reformated_HLA_typing_list\n\nnum_Restricted_MiHA <- dim(Restircted_MiHA_db)[1]\n\naGVHD_Restricted_MiHA_table <- data.frame(MiHA_SNP = Restircted_MiHA_db$HLA_SNP, stringsAsFactors = F)\naGVHD_Restricted_MiHA_table <- cbind(aGVHD_Restricted_MiHA_table, matrix(0, nrow = num_Restricted_MiHA, ncol = 32))\naGVHD_Restricted_MiHA_table_count <- data.frame(HLA_SNP = Restircted_MiHA_db$HLA_SNP, \n                                                SNP =  Restircted_MiHA_db$rs.number, \n                                                Count = numeric(length(Restircted_MiHA_db$HLA_SNP)),\n                                                stringsAsFactors = F)\nnGVHD_Restricted_MiHA_table <- aGVHD_Restricted_MiHA_table\nnGVHD_Restricted_MiHA_table_count <- aGVHD_Restricted_MiHA_table_count\n\nfor(id in 1:num_files){\n  \n  eval(parse(text=paste0(\"load (\\\"\", Individual_MiHA_table_fp, Individual_MiHA_table_files[id], \"\\\")\"))) # MiHA_table\n  \n  groupID <- as.numeric(unlist(strsplit(x = Individual_MiHA_table_files[id], split = \"_\"))[1])\n  if(groupID == 0) stop(id)\n  HLA_table_id <- which(reformated_HLA_typing_list$GroupID == groupID)\n  groupType <- reformated_HLA_typing_list$GroupType[HLA_table_id]\n  num_pos <- dim(MiHA_table)[1]\n  \n  for(jd in 1:num_pos){\n    \n    MiHA_db_ind <- which(Restircted_MiHA_db$CHROM_POS %in% MiHA_table$CHROM_POS[jd])\n    # if(length(MiHA_db_ind) > 1) stop(jd)\n    Restricted_HLA <- unique(Restircted_MiHA_db$HLA[MiHA_db_ind])\n    # length(which(reformated_HLA_typing_list[HLA_table_id, 8:17] %in% Restricted_HLA))\n    matched_HLA_id <- which(Restricted_HLA %in% as.character(reformated_HLA_typing_list[HLA_table_id, 8:17]))\n    \n    if(length(matched_HLA_id) == 1){ # restricted MiHA Presence\n      # if(is.element(Restricted_HLA, as.character(reformated_HLA_typing_list[HLA_table_id, 8:17]))){ # restricted MiHA Presence\n      \n      for(kd in 1:length(matched_HLA_id)){\n        \n        if(groupType ==\"a\"){\n          MiHA_db_ind_id <- which(Restircted_MiHA_db$HLA[MiHA_db_ind] %in% Restricted_HLA[matched_HLA_id[kd]])\n          \n          aGVHD_Restricted_MiHA_table_count$Count[MiHA_db_ind[MiHA_db_ind_id]] <- aGVHD_Restricted_MiHA_table_count$Count[MiHA_db_ind[MiHA_db_ind_id]] + 1\n          firstZeroIndex1 <- which(aGVHD_Restricted_MiHA_table[MiHA_db_ind[MiHA_db_ind_id], -1] == 0)[1] + 1\n          aGVHD_Restricted_MiHA_table[MiHA_db_ind[MiHA_db_ind_id], firstZeroIndex1] <- groupID\n          \n        }else{\n          MiHA_db_ind_id <- which(Restircted_MiHA_db$HLA[MiHA_db_ind] %in% Restricted_HLA[matched_HLA_id[kd]])\n          \n          nGVHD_Restricted_MiHA_table_count$Count[MiHA_db_ind[MiHA_db_ind_id]] <- nGVHD_Restricted_MiHA_table_count$Count[MiHA_db_ind[MiHA_db_ind_id]] + 1\n          firstZeroIndex2 <- which(nGVHD_Restricted_MiHA_table[MiHA_db_ind[MiHA_db_ind_id], -1] == 0)[1] + 1\n          nGVHD_Restricted_MiHA_table[MiHA_db_ind[MiHA_db_ind_id], firstZeroIndex2] <- groupID\n          \n        }\n        \n      }\n      \n    }\n    \n  }\n  \n  \n}\n\ntotal_counts <- cbind(aGVHD_Restricted_MiHA_table_count, nGVHD_Restricted_MiHA_table_count$Count)\ncolnames(total_counts)[3:4] <- c(\"aGVHD\", \"nGVHD\")\n# write.csv(total_counts, file = \"../FirstPaper/Table/HLI_Restricted_MiHA_All_counts_corrected.csv\", row.names = F)\n\ntotal_counts_rm_0s <-total_counts[-which(rowSums(total_counts[,3:4]) == 0), ]\n# write.csv(total_counts_rm_0s, file = \"../FirstPaper/Table/HLI_Restricted_MiHA_All_counts_rm0_CORRECTED.csv\", row.names = F)\n\n#### add MiHA-HLA-SNP-gene\nnum_MiHas <- dim(total_counts_rm_0s)[1]\ncomprehensive_MiHA_count_table <- data.frame(MiHA = character(num_MiHas),\n                                             Restricted_HLA = character(num_MiHas),\n                                             SNP = character(num_MiHas),\n                                             Gene = character(num_MiHas),\n                                             aGVHD = numeric(num_MiHas),\n                                             nGVHD = numeric(num_MiHas),\n                                             LLR = numeric(num_MiHas),\n                                             stringsAsFactors = F)\nfor(id in 1:num_MiHas){\n  \n  index <- which(Restircted_MiHA_db$HLA_SNP %in% total_counts_rm_0s$HLA_SNP[id])\n  comprehensive_MiHA_count_table$MiHA[id] <- as.character(Restircted_MiHA_db$KnownMiHA[index])\n  comprehensive_MiHA_count_table$Restricted_HLA[id] <- as.character(Restircted_MiHA_db$HLA[index])\n  comprehensive_MiHA_count_table$SNP[id] <- as.character(Restircted_MiHA_db$rs.number[index])\n  comprehensive_MiHA_count_table$Gene[id] <- as.character(Restircted_MiHA_db$Gene[index])\n  comprehensive_MiHA_count_table$aGVHD[id] <- total_counts_rm_0s$aGVHD[id]\n  comprehensive_MiHA_count_table$nGVHD[id] <- total_counts_rm_0s$nGVHD[id]\n  comprehensive_MiHA_count_table$LLR[id] <- log10(total_counts_rm_0s$aGVHD[id]/total_counts_rm_0s$nGVHD[id])\n  \n}\n\n#### HLA counts\nRestricted_HLA_count <- read.csv(file = \"../FirstPaper/Table/Restricted_HLA_summary_all_0630.csv\")\ncolnames(Restricted_HLA_count)[1] <- \"HLA\"\n\n### Hypergeometric distribution\n# dhyper(x, m, n, k, log = FALSE) # density function\n# phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE) # distribution function\n# qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE) # quantile function\n# rhyper(nn, m, n, k)  # random generation\n##\n# x - the number of white balls drawn without replacement from an urn;; the number of aGVHD with RestrictedHLA+ MiHA SNP\n# m - the number of white balls in the urn. ;; the number of aGVHD in the HLA type\n# n - the number of black balls in the urn. ;; the number of nGVHD in the HLA type\n# k - the number of balls drawn from the urn. ;; the number of aGVHD+nGVHD with RestrictedHLA + MiHA SNPt\n\ncomprehensive_MiHA_count_table$pValue <- 0\nfor(id in 1:num_MiHas){\n  HLA_ind <- which(Restricted_HLA_count$HLA %in% comprehensive_MiHA_count_table$Restricted_HLA[id])\n  comprehensive_MiHA_count_table$pValue[id] <- phyper(comprehensive_MiHA_count_table$aGVHD[id],\n                                                      Restricted_HLA_count$aGVHD[HLA_ind],\n                                                      Restricted_HLA_count$nGVHD[HLA_ind],\n                                                      comprehensive_MiHA_count_table$aGVHD[id]+comprehensive_MiHA_count_table$nGVHD[id])\n  \n}\ncomprehensive_MiHA_count_table$fdr_p <- 0\nfdr_rate <- 0.05\nsorted_rank <- order(comprehensive_MiHA_count_table$pValue, decreasing = F)\ncomprehensive_MiHA_count_table$fdr_p <- sorted_rank/num_MiHas*fdr_rate\n#### Log-Odds ratio plot\ncomprehensive_MiHA_count_table$MiHA_HLA_SNP_Gene <- sapply(1:dim(comprehensive_MiHA_count_table)[1], \n                                                           function(x) paste0(comprehensive_MiHA_count_table[x, 1:4],\n                                                                              collapse = \"<>\"))\nrm_0ids <- which(comprehensive_MiHA_count_table$LLR == 0)\nMiHA_LLR <- comprehensive_MiHA_count_table[-rm_0ids, c(10,7)]\nmc_LLR <- MiHA_LLR[order(MiHA_LLR$LLR, decreasing = TRUE), ]\nmc_LLR <- within(mc_LLR, MiHA_HLA_SNP_Gene <- factor(MiHA_HLA_SNP_Gene, levels=factor(mc_LLR$MiHA_HLA_SNP_Gene)))\n\nlibrary(ggplot2)\nggplot(mc_LLR, aes(x = MiHA_HLA_SNP_Gene, ymax = LLR, ymin = 0, color = \"#D55E00\")) +\n  geom_linerange(size = 3) +\n  geom_hline(yintercept = 0) +\n  ggtitle(\"LOD of HLA restricted MiHAs [log10(aGVHD/nGVHD)]\") +\n  theme_bw() +\n  xlab(\"\") +\n  # scale_colour(values = \"#D55E00\") +\n  theme(#axis.text.x = element_text(angle = 90, hjust = 1),\n    legend.position = \"none\") +\n  coord_flip() \n\n\n#### Cooccurence table\n#################\n################\n# counts table\n################\nlibrary(corrplot)\n\ntable2matrix <- function(MiHA_count_table){\n  #MiHA_count_table <-  aGVHD_Restricted_MiHA_table\n  \n  num_SNPs <- dim(MiHA_count_table)[1]\n  \n  groupIDs <- unique(c(as.matrix(MiHA_count_table[, -1])))\n  groupIDs <- groupIDs[-which(groupIDs == 0)]\n  num_case <- length(groupIDs)\n  \n  MiHA_SNP_Matrix <- matrix(data = 0, nrow = num_case, ncol = num_SNPs)\n  rownames(MiHA_SNP_Matrix) <- as.character(groupIDs)\n  colnames(MiHA_SNP_Matrix) <- MiHA_count_table$MiHA_SNP\n  for(id in 1:num_SNPs){\n    \n    col_ind <- which(colnames(MiHA_SNP_Matrix) %in% MiHA_count_table$MiHA_SNP[id])\n    tb_gpIDs <- MiHA_count_table[id, -1]\n    tb_gpIDs <- as.character(tb_gpIDs[-which(tb_gpIDs == 0)])\n    row_ids <- which(rownames(MiHA_SNP_Matrix) %in% tb_gpIDs)\n    MiHA_SNP_Matrix[row_ids, col_ind] = MiHA_SNP_Matrix[row_ids, col_ind] + 1\n  }\n  return(MiHA_SNP_Matrix)\n}\n\naGVHD_SNP_Mat <- table2matrix(aGVHD_Restricted_MiHA_table)\nnGVHD_SNP_Mat <- table2matrix(nGVHD_Restricted_MiHA_table)\n\n##########\n# correlation_mat <- cor(SNP_mat[, -c(1,2)], use = \"pairwise.complete.obs\", method = \"pearson\")\n# \ncomprehensive_MiHA_count_table$HLA_SNP <- sapply(1:num_MiHas, function(x) paste0(comprehensive_MiHA_count_table$Restricted_HLA[x], \n                                                                                 \"-\", comprehensive_MiHA_count_table$SNP[x]))\n\ncorrelation_pairs <- function(SNP_mat){\n  \n  correlation_coeff <- cor(SNP_mat, method = \"spearman\")\n  num_Snps <- dim(SNP_mat)[2]\n  p_value_mat <- matrix(data = 1, nrow = num_Snps, ncol = num_Snps)\n  rownames(p_value_mat) <- colnames(SNP_mat)\n  colnames(p_value_mat) <- colnames(SNP_mat)\n  for(id in 1:(num_Snps-1)){\n    \n    for(jd in (id+1):num_Snps){\n      \n      if(correlation_coeff[id, jd] > 0 ){\n        alt = \"greater\"\n      }else{alt = \"less\"}\n      \n      p_value_mat[id, jd] <- cor.test(SNP_mat[, id], SNP_mat[, jd], alternative = alt, method = \"spearman\")[[\"p.value\"]]\n      p_value_mat[jd, id] <- cor.test(SNP_mat[, id], SNP_mat[, jd], alternative = alt, method = \"spearman\")[[\"p.value\"]]\n      \n    }\n    \n  }\n  temp_p_mat <- p_value_mat\n  temp_p_mat[lower.tri(temp_p_mat)] <- 1\n  vec_ind <- which(temp_p_mat < 0.05)\n  \n  rid <- floor(vec_ind/num_Snps) \n  row_ind <- vec_ind - rid * num_Snps  \n  col_ind <- rid + 1\n  \n  sig_pairs <- sapply(1:length(row_ind), function(x) paste(p_value_mat[row_ind[x], col_ind[x]], \n                                                           rownames(p_value_mat)[row_ind[x]], \n                                                           colnames(p_value_mat)[col_ind[x]], \n                                                           correlation_coeff[row_ind[x], col_ind[x]]))\n  \n  return(list(cor_coeff_mat = correlation_coeff, p_values = p_value_mat, sigPairs = sig_pairs))\n}\n\ncheckSigGenePairs <- function(sigPairs, MiHA_convert_table){\n  \n  num_pairs <- length(sigPairs)\n  GenePairs <- data.frame(MiHA_HLA_SNP_Gene1 = character(num_pairs),\n                          MiHA_HLA_SNP_Gene2 = character(num_pairs),\n                          correlation_coeff = numeric(num_pairs),\n                          p_values = numeric(num_pairs),\n                          stringsAsFactors = F) \n  for(id in 1:num_pairs){\n    \n    PairInfo <- unlist(strsplit(sigPairs[id], \" \"))\n    GenePairs$correlation_coeff[id] <- round(as.numeric(PairInfo[4]), digits = 3)\n    GenePairs$p_values[id] <- round(as.numeric(PairInfo[1]), digits = 3)\n    \n    GenePairs$MiHA_HLA_SNP_Gene1[id] <- MiHA_convert_table$MiHA_HLA_SNP_Gene[which(MiHA_convert_table$HLA_SNP %in% PairInfo[2])]\n    GenePairs$MiHA_HLA_SNP_Gene2[id] <- MiHA_convert_table$MiHA_HLA_SNP_Gene[which(MiHA_convert_table$HLA_SNP %in% PairInfo[3])]\n    \n    GenePairs\n  }\n  \n  return(GenePairs)\n}\n\n## A*02:01 restricted MiHAs\naSNP_mat_A0201 <- aGVHD_SNP_Mat[, which(grepl(\"A\\\\*02:01\", colnames(aGVHD_SNP_Mat)))]\naSNP_mat_A0201 <- aSNP_mat_A0201[-which(rowSums(aSNP_mat_A0201) == 0), ]\naSNP_mat_A0201 <- aSNP_mat_A0201[, -which(colSums(aSNP_mat_A0201) == 0)]\ncorrgram(aSNP_mat_A0201, order = F, lower.panel = panel.shade,\n         upper.panel = panel.pie, cor.method = \"spearman\")\ncolSums(aSNP_mat_A0201)\n\nnSNP_mat_A0201 <- nGVHD_SNP_Mat[, which(grepl(\"A\\\\*02:01\", colnames(nGVHD_SNP_Mat)))]\nnSNP_mat_A0201 <- nSNP_mat_A0201[-which(rowSums(nSNP_mat_A0201) == 0), ]\nnSNP_mat_A0201 <- nSNP_mat_A0201[, -which(colSums(nSNP_mat_A0201) == 0)]\ncorrgram(nSNP_mat_A0201, order = F, lower.panel = panel.shade,\n         upper.panel = panel.pie, cor.method = \"spearman\")\ncolSums(nSNP_mat_A0201)\n\naGVHD_correlation_list <- correlation_pairs(aSNP_mat_A0201)\nnGVHD_correlation_list <- correlation_pairs(nSNP_mat_A0201)\n\ncheckSigGenePairs(aGVHD_correlation_list[[\"sigPairs\"]], comprehensive_MiHA_count_table[, 10:11])\ncheckSigGenePairs(nGVHD_correlation_list[[\"sigPairs\"]], comprehensive_MiHA_count_table[, 10:11])\n\ncorrplot(aGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"upper\", method = \"circle\")\ncorrplot(nGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"lower\", method = \"circle\")\n\ncorrplot(aGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"upper\", method = \"ellipse\", \n         p.mat = aGVHD_correlation_list[[\"p_values\"]], sig.level=0.05, insig = \"pch\", pch.col = \"red\", pch.cex = 0.5)\ncorrplot(nGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"upper\", method = \"ellipse\", \n         p.mat = nGVHD_correlation_list[[\"p_values\"]], sig.level=0.05, insig = \"pch\", pch.col = \"red\", pch.cex = 0.5)\n\n## B*07:02\naSNP_mat_B0702 <- aGVHD_SNP_Mat[, which(grepl(\"B\\\\*07:02\", colnames(aGVHD_SNP_Mat)))]\naSNP_mat_B0702 <- aSNP_mat_B0702[-which(rowSums(aSNP_mat_B0702) == 0), ]\naSNP_mat_B0702 <- aSNP_mat_B0702[, -which(colSums(aSNP_mat_B0702) == 0)]\n\nnSNP_mat_B0702 <- nGVHD_SNP_Mat[, which(grepl(\"B\\\\*07:02\", colnames(nGVHD_SNP_Mat)))]\nnSNP_mat_B0702 <- nSNP_mat_B0702[-which(rowSums(nSNP_mat_B0702) == 0), ]\nnSNP_mat_B0702 <- nSNP_mat_B0702[, -which(colSums(nSNP_mat_B0702) == 0)]\n\naGVHD_correlation_list <- correlation_pairs(aSNP_mat_B0702)\nnGVHD_correlation_list <- correlation_pairs(nSNP_mat_B0702)\n\ncheckSigGenePairs(aGVHD_correlation_list[[\"sigPairs\"]], comprehensive_MiHA_count_table[, 10:11])\ncheckSigGenePairs(nGVHD_correlation_list[[\"sigPairs\"]], comprehensive_MiHA_count_table[, 10:11])\n\n\ncorrplot(aGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"upper\", method = \"circle\")\ncorrplot(nGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"lower\", method = \"circle\")\n\ncorrplot(aGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"lower\", method = \"ellipse\", \n         p.mat = aGVHD_correlation_list[[\"p_values\"]], sig.level=0.05, insig = \"pch\", pch.col = \"red\", pch.cex = 0.5)\ncorrplot(nGVHD_correlation_list[[\"cor_coeff_mat\"]], type = \"lower\", method = \"ellipse\", \n         p.mat = nGVHD_correlation_list[[\"p_values\"]], sig.level=0.05, insig = \"pch\", pch.col = \"red\", pch.cex = 0.5)\n\n\n\n##########\n#### RandomForest variable importance\nlibrary(randomForest)\n\n# Feat <- rbind(aGVHD_SNP_Mat, nGVHD_SNP_Mat)\nFeat <- rbind(aGVHD_SNP_Mat, nGVHD_SNP_Mat)\nLabels <- c(rep(\"a\", dim(aGVHD_SNP_Mat)[1]), \n            rep(\"n\", dim(nGVHD_SNP_Mat)[1]))\nLabels <- as.factor(Labels)\nfeat_lab <- cbind(Feat, Labels)\n\nRF_feat <- randomForest(x = Feat, y = Labels, importance=TRUE)\n# round(importance(RF_feat), 2)\nimp <- importance(RF_feat, type =1, scale=T) \nimportances_order <- order(imp, decreasing = T)\nordered_feat_set <- colnames(Feat)[importances_order]\nordered_feat_imp <- imp[importances_order]\n\nfeat_imp_table <- data.frame(MiHA_HLA_SNP_Gene = character(length(ordered_feat_set)),\n                             HLA_SNP = ordered_feat_set,\n                             FeatScore = ordered_feat_imp,\n                             stringsAsFactors = F)\nfeat_imp_table$MiHA_HLA_SNP_Gene <- sapply(1:length(ordered_feat_set), function(x) comprehensive_MiHA_count_table$MiHA_HLA_SNP_Gene[which(comprehensive_MiHA_count_table$HLA_SNP %in% ordered_feat_set[x])])\n\n\n################################### GWAS ### \n#################\nload(\"../Data/GWAS_HLI_overlapping_SNPs_wHLA.RData\") ## overlapping_SNPs\noverlapping_SNPs$CHROM_POS <- overlapping_SNPs$chr_POS\nload(\"../Data/ID_table_wCaseID.RData\")          ## ID_table\n\nGWAS_avail_cases <- read.csv(file = \"../ClinVar/GWASH/GWASH_available_IDs.csv\")\n############################\n## MiHA Combination\nAML_cases_table <- GWAS_avail_cases\n\nNum_AML_cases <- dim(AML_cases_table)[1]\nmismatch_MiHA_table <- matrix(data = 0, nrow = Num_AML_cases, ncol = 2*num_SNPs+2)\ncolnames(mismatch_MiHA_table) <- c(\"CaseNumber\", \"aGVHD\", \n                                   as.vector(sapply(1:num_SNPs, function(x) paste0(MiHA_SNPs$SNP_ID[x], c(\"_PresAbs\", \"_Number\"))))) \n## presense-absence of the MihA mimatch + number of mismatched alleles\n\n\nmismatch_MiHA_table <- as.data.frame(mismatch_MiHA_table)\ncounter <- 0\nfor(id in 1:Num_AML_cases){\n  \n  index <- which(MiHA_genotypes$case_id %in% AML_cases_table$bmt_case[id])\n  \n  if(length(index) == 2){ # matching cases\n    counter <- counter + 1\n    mismatch_MiHA_table$CaseNumber[counter] <- AML_cases_table$bmt_case[id]\n    mismatch_MiHA_table$aGVHD[counter] <- AML_cases_table$agvhi24[id]\n    \n    for(jd in 1:num_SNPs){\n      \n      mismatch_MiHA_table[counter, 4+2*(jd-1)] <- identical(MiHA_genotypes[index[1], SNP_index[1+2*(jd-1)]], MiHA_genotypes[index[2], SNP_index[1+2*(jd-1)]]) + \n        identical(MiHA_genotypes[index[1], SNP_index[2*jd]], MiHA_genotypes[index[2], SNP_index[2*jd]])\n      \n      mismatch_MiHA_table[counter, 3+2*(jd-1)] <- as.integer(identical(MiHA_genotypes[index[1], SNP_index[1+2*(jd-1)]], MiHA_genotypes[index[2], SNP_index[1+2*(jd-1)]]) | \n                                                               identical(MiHA_genotypes[index[1], SNP_index[2*jd]], MiHA_genotypes[index[2], SNP_index[2*jd]]))\n      \n    }\n    \n    \n  }\n  \n  \n}\n\nmismatch_MiHA_table <- mismatch_MiHA_table[1:counter, ]\n\nall_possible_pairs_num <- num_SNPs * (num_SNPs -1) / 2\n# all_possible_pairs_names <- character(all_possible_pairs_num)\na_pair_wise_combination <- as.data.frame(matrix(data = 0, nrow = all_possible_pairs_num, ncol = 5), stringsAsFactors = F) # col: abs - abs 0-0;  pres-abs 1-0;  abs-pres 0-1; pres - pres 1-1\ncolnames(a_pair_wise_combination) <- c(\"SNPComb\", \"abs-abs\", \"pres-abs\", \"abs-pres\", \"pres-pres\")\nn_pair_wise_combination <- as.data.frame(matrix(data = 0, nrow = all_possible_pairs_num, ncol = 5), stringsAsFactors = F)\ncolnames(n_pair_wise_combination) <- c(\"SNPComb\", \"abs-abs\", \"pres-abs\", \"abs-pres\", \"pres-pres\")\n\naGVHD_index <- which(mismatch_MiHA_table$aGVHD == 1) # 146\nnGVHD_index <- which(mismatch_MiHA_table$aGVHD == 0) # 186\ncounter <- 0 \nfor(id in 1:(num_SNPs-1)){\n  \n  for(jd in (id+1):num_SNPs){\n    # if(id != jd){\n    \n    counter <- counter + 1\n    \n    sum_tab <- as.data.frame(table(mismatch_MiHA_table[aGVHD_index, c(3 + 2*(id-1), 3 + 2*(jd-1))]), stringsAsFactors = F)\n    \n    SNP_1 <- gsub(\"_PresAbs\", \"\", colnames(sum_tab)[1])\n    SNP_2 <- gsub(\"_PresAbs\", \"\", colnames(sum_tab)[2])\n    \n    a_pair_wise_combination[counter, 1] <- paste0(SNP_1, \"-\", SNP_2)\n    a_pair_wise_combination[counter, 2:5] <- as.numeric(sum_tab$Freq)\n    \n    if(!identical(as.numeric(sum_tab[2, c(1,2)]),  c(1, 0))) cat(\"aGVHD: id = \", id, \"; jd = \", jd, \"\\n\")\n    \n    nsum_tab <- as.data.frame(table(mismatch_MiHA_table[nGVHD_index, c(3 + 2*(id-1), 3 + 2*(jd-1))]), stringsAsFactors = F)\n    \n    nSNP_1 <- gsub(\"_PresAbs\", \"\", colnames(nsum_tab)[1])\n    nSNP_2 <- gsub(\"_PresAbs\", \"\", colnames(nsum_tab)[2])\n    \n    n_pair_wise_combination[counter, 1] <- paste0(nSNP_1, \"-\", nSNP_2)\n    n_pair_wise_combination[counter, 2:5] <- as.numeric(nsum_tab$Freq)\n    \n    if(!identical(as.numeric(nsum_tab[2, c(1,2)]),  c(1, 0))) cat(\"nGVHD: id = \", id, \"; jd = \", jd, \"\\n\")\n    \n    \n  }\n  \n  # }\n  \n}\n\nsave(mismatch_MiHA_table, file = \"../Data/GWASH_mismatch_MiHA_table_AllSamples.RData\")\n##### 45 MiHA SNPs --- Outcome vs rs-rs association test\na_joint_SNPs <- read.csv(file = \"../ClinVar/Data/unrestricted_aGVHD_pairwise_summary_AP.csv\", stringsAsFactors = F)\nn_joint_SNPs <- read.csv(file = \"../ClinVar/Data/unrestricted_nonGVHD_pairwise_summary_AP.csv\", stringsAsFactors = F)\n\na_joint_snps_ordered <- read.csv(file = \"../ClinVar/Data/unrestricted_aGVHD_pairwise_ordered_AP.csv\", stringsAsFactors = F)\nn_joint_snps_ordered <- read.csv(file = \"../ClinVar/Data/unrestricted_nonGVHD_pairwise_ordered_AP.csv\", stringsAsFactors = F)\n\na_overlapped_combination <- intersect(a_joint_SNPs$X, a_pair_wise_combination$SNPComb) # 102 \nn_overlapped_combination <- intersect(n_joint_SNPs$X, n_pair_wise_combination$SNPComb) # 102\n\na_ordered_name <- sapply(1:length(a_joint_SNPs$X), function(x) paste0(sort(unlist(strsplit(a_joint_SNPs$X[x], \"-\"))), collapse = \"-\"))\nn_ordered_name <- sapply(1:length(n_joint_SNPs$X), function(x) paste0(sort(unlist(strsplit(n_joint_SNPs$X[x], \"-\"))), collapse = \"-\"))\n\naaa_ordered_name <- sapply(1:length(a_pair_wise_combination$SNPComb), function(x) paste0(sort(unlist(strsplit(a_pair_wise_combination$SNPComb[x], \"-\"))), collapse = \"-\"))\nnnn_ordered_name <- sapply(1:length(n_pair_wise_combination$SNPComb), function(x) paste0(sort(unlist(strsplit(n_pair_wise_combination$SNPComb[x], \"-\"))), collapse = \"-\"))\n\na_overlapped_combination_ordered <- intersect(a_ordered_name, aaa_ordered_name) # 190\nn_overlapped_combination_ordered <- intersect(n_ordered_name, nnn_ordered_name) # 190\n\n## verification of overlapping MiHA combination between the HLI cohort and GWAS cohort\naind <- which(!(aaa_ordered_name %in% a_overlapped_combination_ordered))\naind2 <- which(!(a_ordered_name %in% a_overlapped_combination_ordered))\n\na_num_pairs <- sapply(1:length(a_joint_SNPs$X), function(x) length(which((unlist(strsplit(a_joint_SNPs$X[x], \"-\"))) %in% MiHA_SNPs$SNP_ID))) # length(which(a_num_pairs == 2)): 190\nn_num_pairs <- sapply(1:length(n_joint_SNPs$X), function(x) length(which((unlist(strsplit(n_joint_SNPs$X[x], \"-\"))) %in% MiHA_SNPs$SNP_ID))) # length(which(n_num_pairs == 2)): 190\n\n########## verification ends here ####################\n\n####### combine two tables\n\n## aGVHD\na_GWAS_ind <- which((aaa_ordered_name %in% a_overlapped_combination_ordered))\na_HLI_ind <- which((a_ordered_name %in% a_overlapped_combination_ordered))\n\na_combined_table <- a_pair_wise_combination[a_GWAS_ind, ]\n# abs-abs; pres-abs; abs-pres; pres-pres\nnum_overlapped <- length(a_GWAS_ind)\nfor(id in 1:num_overlapped){\n  \n  index <- which(a_ordered_name %in% aaa_ordered_name[a_GWAS_ind[id]])\n  \n  a_combined_table$`abs-abs`[id] <- a_combined_table$`abs-abs`[id] + a_joint_SNPs$absence.absence[index]\n  a_combined_table$`pres-abs`[id] <- a_combined_table$`pres-abs`[id] + a_joint_snps_ordered$presence.HET..absence[index] + a_joint_snps_ordered$presence.HOM..absence[index]\n  a_combined_table$`abs-pres`[id] <- a_combined_table$`abs-pres`[id] + a_joint_snps_ordered$absence.presence.HET.[index] + a_joint_snps_ordered$absence.presence.HOM.[index]\n  a_combined_table$`pres-pres`[id] <- a_combined_table$`pres-pres`[id] + a_joint_snps_ordered$presence.HET..presence.HOM.[index] + a_joint_snps_ordered$presence.HOM..presence.HET.[index]\n  \n}\na_combined_table <- rbind(a_combined_table, a_pair_wise_combination[-a_GWAS_ind, ])\n\n# nGVHD\nn_GWAS_ind <- which((nnn_ordered_name %in% n_overlapped_combination_ordered))\nn_HLI_ind <- which((n_ordered_name %in% n_overlapped_combination_ordered))\n\nn_combined_table <- n_pair_wise_combination[n_GWAS_ind, ]\n# abs-abs; pres-abs; abs-pres; pres-pres\nnum_overlapped <- length(n_GWAS_ind)\nfor(id in 1:num_overlapped){\n  \n  index <- which(n_ordered_name %in% nnn_ordered_name[n_GWAS_ind[id]])\n  \n  n_combined_table$`abs-abs`[id] <- n_combined_table$`abs-abs`[id] + n_joint_SNPs$absence.absence[index]\n  n_combined_table$`pres-abs`[id] <- n_combined_table$`pres-abs`[id] + n_joint_snps_ordered$presence.HET..absence[index] + n_joint_snps_ordered$presence.HOM..absence[index]\n  n_combined_table$`abs-pres`[id] <- n_combined_table$`abs-pres`[id] + n_joint_snps_ordered$absence.presence.HET.[index] + n_joint_snps_ordered$absence.presence.HOM.[index]\n  n_combined_table$`pres-pres`[id] <- n_combined_table$`pres-pres`[id] + n_joint_snps_ordered$presence.HET..presence.HOM.[index] + n_joint_snps_ordered$presence.HOM..presence.HET.[index]\n  \n}\nn_combined_table <- rbind(n_combined_table, n_pair_wise_combination[-n_GWAS_ind, ])\n",
    "created" : 1507839217487.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3636874149",
    "id" : "67E5A4A6",
    "lastKnownWriteTime" : 1507839227,
    "last_content_update" : 1507839227031,
    "path" : "~/Documents/NGSProject/2017WGS/R/GeneGeneInteraction_HSCT/MiHA_correlation.R",
    "project_path" : "MiHA_correlation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}