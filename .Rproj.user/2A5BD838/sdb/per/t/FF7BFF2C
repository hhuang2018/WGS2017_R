{
    "collab_server" : "",
    "contents" : "#source(\"https://bioconductor.org/biocLite.R\")\n#biocLite(\"snpStats\")\n#biocLite(\"snpMatrix\")\noutputFp <- \"../../HLI/GenotypeTables/\"\n\n### Load Genotype data\nGeneName = \"IL10\"\nload(paste0(outputFp, GeneName, \"_DRpair_genotypes.RData\"))\n\nIL10_list <- GeneGenoType_List\n\nGeneName = \"IL10RB\"\nload(paste0(outputFp, GeneName, \"_DRpair_genotypes.RData\"))\n\nIL10RB_list <- GeneGenoType_List\n\n###\n#IL10_samples <- colnames(IL10_list)[-(1:5)]\n#IL10RB_samples <- colnames(IL10RB_list)[-(1:5)]\n# \n## Convert to SNP matrix\ngeneMat <- function(GeneName, GENE_list){\n  Samples <- colnames(GENE_list)[-(1:5)]\n  numSamp <- length(Samples)\n  numSNV <- dim(GENE_list)[1]\n  \n  Gene_SNP_numeric <- matrix(data = NA, nrow = numSamp, ncol = numSNV)\n  GVHD_Label <- vector(mode = \"character\", length = numSamp)\n  SNPName <- vector(mode = \"character\", length = numSNV)\n  \n  for(id in 1:numSamp){\n    \n    GVHD_Label[id] <- strsplit(Samples[id], \"_\")[[1]][1]\n    \n    for(jd in 1:numSNV){\n      SNPName[jd] <- paste0(GeneName, \"-\", GENE_list$CHROM[jd], \"-\", GENE_list$POS[jd])\n      DR_GT <- unlist(GENE_list[Samples[id]])[jd]\n      D_GT <- strsplit(DR_GT, \"-\")[[1]][1]\n      R_GT <- strsplit(DR_GT, \"-\")[[1]][2]\n      if(is.na(D_GT) | is.na(R_GT)){\n        Gene_SNP_numeric[id, jd] <- 4\n      }else if(D_GT == R_GT){\n        Gene_SNP_numeric[id, jd] <- 1\n      }else{\n        \n        if(is.na(D_GT)){\n          D_GT <- c(GENE_list$REF[jd], GENE_list$REF[jd])\n        }else{\n          D_GT <- strsplit(D_GT, '/')[[1]]\n        }\n        \n        if(is.na(R_GT)){\n          R_GT <- c(GENE_list$REF[jd], GENE_list$REF[jd])\n        }else{\n          R_GT <- strsplit(R_GT, '/')[[1]]\n        }\n        \n        # same genotype --- 0  1\n        # 1 mismatch ------ 1  2\n        # 2 mismatches ---- 2  3\n        Gene_SNP_numeric[id, jd] <- 3 - length(intersect(D_GT, R_GT)) \n        \n      }\n    }\n    \n  }\n  \n  colnames(Gene_SNP_numeric) <- SNPName\n  rownames(Gene_SNP_numeric) <- Samples\n  return(list(Gene_mat = Gene_SNP_numeric, Label = GVHD_Label))\n}\n## Donor and Recipient\nDR_GenoType <- function(GeneName, GENE_list){\n  Samples <- colnames(GENE_list)[-(1:5)]\n  numSamp <- length(Samples)\n  numSNV <- dim(GENE_list)[1]\n  \n  Gene_SNP_donor <- matrix(data = NA, nrow = numSamp, ncol = numSNV)\n  Gene_SNP_recipient <- matrix(data = NA, nrow = numSamp, ncol = numSNV)\n  GVHD_Label <- vector(mode = \"character\", length = numSamp)\n  SNPName <- vector(mode = \"character\", length = numSNV)\n  \n  for(id in 1:numSamp){\n    \n    GVHD_Label[id] <- strsplit(Samples[id], \"_\")[[1]][1]\n    \n    for(jd in 1:numSNV){\n      SNPName[jd] <- paste0(GeneName, \"-\", GENE_list$CHROM[jd], \"-\", GENE_list$POS[jd])\n      DR_GT <- unlist(GENE_list[Samples[id]])[jd]\n      D_GT <- strsplit(DR_GT, \"-\")[[1]][1]\n      R_GT <- strsplit(DR_GT, \"-\")[[1]][2]\n      if(is.na(D_GT)){\n        Gene_SNP_donor[id, jd] <- 0\n      }else{\n        D_GTs <- strsplit(D_GT, \"/\")\n        Gene_SNP_donor[id, jd] <- D_GT\n      }\n      if(is.na(R_GT)){\n        Gene_SNP_recipient[id, jd] <- paste0(GENE_list$REF[jd], \"/\", GENE_list$REF[jd])\n      }else{\n        Gene_SNP_recipient[id, jd] <- R_GT\n      }\n    }\n    \n  }\n  \n  colnames(Gene_SNP_donor) <- SNPName\n  rownames(Gene_SNP_donor) <- Samples\n  \n  colnames(Gene_SNP_recipient) <- SNPName\n  rownames(Gene_SNP_recipient) <- Samples\n  return(list(Donor = Gene_SNP_donor, Recipient = Gene_SNP_recipient, Label = GVHD_Label))\n}\n## \n#GeneName <- \"IL10\"\n#GENE_list <- IL10_list\nIL10_Gene_List <- geneMat(\"IL10\", IL10_list)\n\nIL10_rm_ids <- vector(mode = \"numeric\", length=0)\nfor(id in 1:dim(IL10_Gene_List$Gene_mat)[2]){\n  if(length(which(IL10_Gene_List$Gene_mat[,id] == 4)) > 20){\n    IL10_rm_ids <- c(IL10_rm_ids, id)\n  }\n}\n\nfiltered_IL10_SNV <- IL10_Gene_List$Gene_mat[, -rm_ids]\n\nIL10_Gene_List_GT <- DR_GenoType(\"IL10\", IL10_list)\nIL10_Donor <- IL10_Gene_List_GT$Donor\nIL10_Recipient <- IL10_Gene_List_GT$Recipient\n\n\n##\nIL10RB_Gene_List <- geneMat(\"IL10RB\", IL10RB_list)\n\nIL10RB_rm_ids <- vector(mode = \"numeric\", length=0)\nfor(id in 1:dim(IL10RB_Gene_List$Gene_mat)[2]){\n  if(length(which(IL10RB_Gene_List$Gene_mat[,id] == 4)) > 20){\n    IL10RB_rm_ids <- c(IL10RB_rm_ids, id)\n  }\n}\n\nfiltered_IL10RB_SNV <- IL10RB_Gene_List$Gene_mat[, -rm_ids]\n\nIL10RB_Gene_List_GT <- DR_GenoType(\"IL10RB\", IL10RB_list)\nIL10RB_Donor <- IL10RB_Gene_List_GT$Donor\nIL10RB_Recipient <- IL10RB_Gene_List_GT$Recipient\n\n##\nGene1_Recipient <- new(\"SnpMatrix\", IL10_Recipient)\nGene2_Donor <- new(\"SnpMatrix\", IL10RB_Donor)\n##\nGene1_filtered <- new(\"SnpMatrix\", filtered_IL10_SNV)\nGene2_filtered <- new(\"SnpMatrix\", filtered_IL10RB_SNV)\n##\nGene1 <- new(\"SnpMatrix\", IL10_Gene_List$Gene_mat)\nGene2 <- new(\"SnpMatrix\", IL10RB_Gene_List$Gene_mat)\n\nLabel <- as.factor(IL10_Gene_List$Label)\n######\n# Multidimensional methods at the gene level\n# 1. PCA\nPCA.test(Y=Label, G1=Gene1_Recipient, G2=Gene2_Donor,threshold=0.7,\n         method=\"GenFreq\")\nPCA.test(Y=gene.pair$Y, G1=Gene1_Recipient, G2=Gene2_Donor, threshold=0.7,\n         method=\"Std\")\n\n# 2.  Canonical Correlation Analysis (CCA)\nset.seed(1234)\nCCA.test(Y=gene.pair$Y, G1=gene.pair$G1, G2=gene.pair$G2,n.boot=500)\n\n# 3.  Kernel Canonical Correlation Analysis (KCCA)\nset.seed(1234)\nKCCA.test(Y=gene.pair$Y, G1=gene.pair$G1,G2=gene.pair$G2,\n          kernel=\"rbfdot\",sigma = 0.05,n.boot=500)\n\nKCCA.test(Y=gene.pair$Y, G1=gene.pair$G1,G2=gene.pair$G2,\n          kernel=\"polydot\",degree = 1, scale = 1, offset = 1)\n\n# 4. Partial Least Square Path Modeling (PLSPM)\nset.seed(1234)\nPLSPM.test(Y=gene.pair$Y, G1=gene.pair$G1,G2=gene.pair$G2,n.perm=1000)\n\n# 5. Composite Linkage Disequilibrium (CLD)\nCLD.test(Y=Label, G1=Gene1_Recipient,G2=Gene2_Donor, n.perm=1000)\n\n# 6. Gene-Based Information Gain Method (GBIGM)\nGBIGM.test(Y=Label, G1=Gene1,G2=Gene2,n.perm=2000)\n\n\n##  From SNP-SNP interaction to Gene-Gene interaction testing\n# 1. minP\nset.seed(1234)\nminP.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered)\n\n# 2. GATES\nset.seed(1234)\ngates.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,me.est=\"ChevNy\")\n\nset.seed(1234)\ngates.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,alpha=0.05,me.est=\"Keff\")\n\nset.seed(1234)\ngates.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,me.est=\"LiJi\")\n\nset.seed(1234)\ngates.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,me.est=\"Galwey\")\n\n# 3. tTS and tProd\nset.seed(1234)\ntTS.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,tau=0.5,n.sim=10000)\n\nset.seed(1234)\ntProd.test(Y=Label, G1=Gene1_filtered,G2=Gene2_filtered,tau=0.05,n.sim=1000)\n\n\n",
    "created" : 1507839509823.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "21|41|70|0|\n",
    "hash" : "1731220003",
    "id" : "FF7BFF2C",
    "lastKnownWriteTime" : 1508300329,
    "last_content_update" : 1508300329631,
    "path" : "~/Documents/NGSProject/2017WGS/R/GeneGeneInteraction_HSCT/SNP_matrix_test.R",
    "project_path" : "SNP_matrix_test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}